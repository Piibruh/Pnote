# Ghi ch√∫: File n√†y ch·ªâ ch·ª©a code ƒë·ªÉ v·∫Ω thanh sidebar.
import streamlit as st
import time
from core.services import course_manager_service, document_processor_service

def _safe_course_name(name):
    """T·∫°o t√™n h·ª£p l·ªá cho collection, lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát."""
    return "".join(c for c in name if c.isalnum() or c in (' ', '_')).strip().replace(' ', '_').lower()

def display_sidebar():
    """V·∫Ω to√†n b·ªô n·ªôi dung c·ªßa sidebar v√† x·ª≠ l√Ω logic c·ªßa n√≥."""
    with st.sidebar:
        st.title("üìù PNote")
        st.markdown("---")
        st.header("üìö Qu·∫£n l√Ω Kh√≥a h·ªçc")
        
        new_course_name_input = st.text_input("T√™n kh√≥a h·ªçc m·ªõi", placeholder="vd: L·ªãch s·ª≠ ƒê·∫£ng")
        if st.button("T·∫°o Kh√≥a h·ªçc"):
            if not new_course_name_input:
                st.warning("Vui l√≤ng nh·∫≠p t√™n kh√≥a h·ªçc.")
            else:
                safe_name = _safe_course_name(new_course_name_input)
                # Ki·ªÉm tra n·∫øu t√™n sau khi x·ª≠ l√Ω b·ªã r·ªóng
                if not safe_name:
                    st.error("T√™n kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng ch·ªØ c√°i ho·∫∑c s·ªë.")
                elif safe_name in st.session_state.courses:
                    st.warning(f"Kh√≥a h·ªçc '{safe_name}' ƒë√£ t·ªìn t·∫°i.")
                else:
                    st.session_state.courses.append(safe_name)
                    st.session_state.current_course = safe_name
                    st.success(f"ƒê√£ t·∫°o '{safe_name}'!")
                    time.sleep(1)
                    st.rerun()

        if st.session_state.courses:
            try:
                current_index = st.session_state.courses.index(st.session_state.current_course)
            except (ValueError, TypeError):
                current_index = 0
            
            selected_course = st.selectbox("Ch·ªçn kh√≥a h·ªçc", options=st.session_state.courses, index=current_index)
            if selected_course != st.session_state.current_course:
                st.session_state.current_course = selected_course
                st.rerun()
        else:
            st.info("T·∫°o kh√≥a h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

        st.markdown("---")

        if st.session_state.current_course:
            st.header(f"‚ûï Th√™m t√†i li·ªáu")
            uploaded_file = st.file_uploader("1. T·∫£i file (PDF, DOCX)", type=["pdf", "docx"])
            url_input = st.text_input("2. Nh·∫≠p URL (b√†i b√°o, YouTube)", placeholder="https://...")
            pasted_text = st.text_area("3. D√°n vƒÉn b·∫£n v√†o ƒë√¢y")
            
            if st.button("X·ª≠ l√Ω v√† Th√™m"):
                with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω..."):
                    source_type, source_data = (None, None)
                    # ∆Øu ti√™n x·ª≠ l√Ω theo th·ª© t·ª±: file -> url -> text
                    if uploaded_file:
                        source_type = uploaded_file.name.split('.')[-1]
                        source_data = uploaded_file
                    elif url_input:
                        source_type = 'url'
                        source_data = url_input
                    elif pasted_text:
                        source_type = 'text'
                        source_data = pasted_text
                    
                    if source_type and source_data:
                        text, source_name = document_processor_service.extract_text(source_type, source_data)
                        if text:
                            chunks_added = course_manager_service.add_document(st.session_state.current_course, text, source_name)
                            st.success(f"ƒê√£ th√™m {chunks_added} ki·∫øn th·ª©c t·ª´ '{source_name}'.")
                        else:
                            st.error(f"L·ªói: {source_name}")
                    else:
                        st.warning("Vui l√≤ng cung c·∫•p t√†i li·ªáu.")

        # Ph·∫ßn Dark Mode, ƒë∆∞·ª£c ƒë·∫∑t ·ªü cu·ªëi sidebar
        st.markdown("---")
        st.header("üé® Giao di·ªán")

        if 'theme' not in st.session_state:
            st.session_state.theme = 'light'

        is_dark = st.toggle("B·∫≠t Ch·∫ø ƒë·ªô T·ªëi", value=(st.session_state.theme == 'dark'))
        
        if is_dark:
            st.session_state.theme = 'dark'
            st.markdown('<script>document.body.classList.add("dark-mode");</script>', unsafe_allow_html=True)
        else:
            st.session_state.theme = 'light'
            st.markdown('<script>document.body.classList.remove("dark-mode");</script>', unsafe_allow_html=True)
